#usda 1.0
(
    defaultPrim = "CornellBox_Mirror"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "CornellBox_Mirror" (
    kind = "component"
)
{
    float3 xformOp:translate:pivot = (-0.00999999, 0.995, -0.024999976)
    uniform token[] xformOpOrder = ["xformOp:translate:pivot", "!invert!xformOp:translate:pivot"]

    def Mesh "backWall" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.02, 0, -1.04), (1, 1.99, -1.04)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </whiteSG>
        normal3f[] normals = [(0, 0, 1), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.99, 0, -1.04), (1, 0, -1.04), (1, 1.99, -1.04), (-1.02, 1.99, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "ceiling" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.02, 1.99, -1.04), (1, 1.99, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </whiteSG>
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-1.02, 1.99, 0.99), (-1.02, 1.99, -1.04), (1, 1.99, -1.04), (1, 1.99, 0.99)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "floor" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.01, 0, -1.04), (1, 0, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </whiteSG>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-1.01, 0, 0.99), (1, 0, 0.99), (1, 0, -1.04), (-0.99, 0, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Xform "leftWall"
    {
        def Mesh "polySurface1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1.02, 0, -1.04), (0.53, 1.99, 0.99)]
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 2, 3]
            rel material:binding = </CornellBox_Mirror/Looks/leftWall14SG>
            normal3f[] normals = [(0.9999374, 0.010049638, 0.004925796), (0.99993736, 0.010049638, 0.0049257954), (0.9999374, 0.010049637, 0.004925796), (0.9999374, 0.010049637, 0.004925796)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1.01, 0, 0.99), (-0.99, 0, -1.04), (-1.02, 1.99, -1.04), (-1.02, 1.99, 0.99), (0.53, 0, 0.75)]
            uniform token subdivisionScheme = "none"
        }
    }

    def Mesh "rightWall" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(1, 0, -1.04), (1, 1.99, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Mirror/Looks/rightWall14SG>
        normal3f[] normals = [(-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(1, 0, -1.04), (1, 0, 0.99), (1, 1.99, 0.99), (1, 1.99, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "shortBox" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.71, 0, -0.67), (0.04, 1.2, 0.09)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 16, 17, 18, 19]
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.9550641, 0, 0.2963992), (-0.9550641, 0, 0.2963992), (-0.9550641, 0, 0.2963992), (-0.9550641, 0, 0.2963992), (-0.3011314, 0, -0.9535827), (-0.3011314, 0, -0.9535827), (-0.3011314, 0, -0.9535827), (-0.3011314, 0, -0.9535827), (0.9550641, 0, -0.2963992), (0.9550641, 0, -0.2963992), (0.9550641, 0, -0.2963992), (0.9550641, 0, -0.2963992), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827), (0.3011314, 0, 0.9535827)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-0.53, 1.2, 0.09), (0.04, 1.2, -0.09), (-0.14, 1.2, -0.67), (-0.71, 1.2, -0.49), (-0.53, 0, 0.09), (-0.53, 1.2, 0.09), (-0.71, 1.2, -0.49), (-0.71, 0, -0.49), (-0.71, 0, -0.49), (-0.71, 1.2, -0.49), (-0.14, 1.2, -0.67), (-0.14, 0, -0.67), (-0.14, 0, -0.67), (-0.14, 1.2, -0.67), (0.04, 1.2, -0.09), (0.04, 0, -0.09), (0.04, 0, -0.09), (0.04, 1.2, -0.09), (-0.53, 1.2, 0.09), (-0.53, 0, 0.09), (-0.53, 0, 0.09), (0.04, 0, -0.09), (-0.14, 0, -0.67), (-0.71, 0, -0.49)]
        uniform token subdivisionScheme = "none"
        uniform token subsetFamily:materialBind:familyType = "partition"

        def GeomSubset "tallBox" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token elementType = "face"
            uniform token familyName = "materialBind"
            int[] indices = [0, 1, 2, 3, 4, 5]
            rel material:binding = </CornellBox_Mirror/Looks/tallBox>
        }
    }

    def Scope "Looks"
    {
        def Material "tallBox"
        {
            token outputs:surface.connect = </CornellBox_Mirror/Looks/tallBox/tallBox1.outputs:surface>

            def Shader "tallBox1"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.008, 0.008, 0.008)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.04671342
                color3f inputs:specularColor = (0.95, 0.95, 0.95)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }

        def Material "leftWall14SG"
        {
            token outputs:surface.connect = </CornellBox_Mirror/Looks/leftWall14SG/leftWall14.outputs:surface>

            def Shader "leftWall14"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.504, 0.051999997, 0.040000003)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.33700418
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }

        def Material "rightWall14SG"
        {
            token outputs:surface.connect = </CornellBox_Mirror/Looks/rightWall14SG/rightWall14.outputs:surface>

            def Shader "rightWall14"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.112, 0.35999998, 0.0728)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.33700418
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }
    }
}

def Camera "render_cam" (
    kind = "assembly"
)
{
    float2 clippingRange = (0.1, 10000)
    float focusDistance = 5
    float horizontalAperture = 35.999928
    float verticalAperture = 23.999952
    double3 xformOp:translate = (-0.005824091712684901, 0.9618697709986984, 3.6121883675274837)
    uniform token[] xformOpOrder = ["xformOp:translate"]
}

def RectLight "areaLight1" (
    prepend apiSchemas = ["ShadowAPI"]
    kind = "assembly"
)
{
    float inputs:intensity = 30
    bool inputs:normalize = 1
    color3f inputs:shadow:color
    bool inputs:shadow:enable
    float3 xformOp:rotateXYZ = (-90, 0, 0)
    float3 xformOp:scale = (0.2313511, 0.18880378, 0.23932873)
    double3 xformOp:translate = (-0.005312805952886301, 1.9696238887391315, -0.026564029764432)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def Mesh "polySurface4" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.05, 0, 0), (0.7, 0.6, 0.75)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
    rel material:binding = </whiteSG>
    normal3f[] normals = [(-0.29639924, 0, 0.9550641), (-0.29639924, 0, 0.9550641), (-0.29639924, 0, 0.9550641), (-0.29639924, 0, 0.9550641), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0.9596285, 0, 0.28127044), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.9535827, 0, -0.30113137), (-0.9535827, 0, -0.30113137), (-0.9535827, 0, -0.30113137), (-0.9535827, 0, -0.30113137), (0.28580514, 0, -0.9582878), (0.28580514, 0, -0.9582878), (0.28580514, 0, -0.9582878), (0.28580514, 0, -0.9582878)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(0.53, 0, 0.75), (0.53, 0.6, 0.75), (-0.05, 0.6, 0.57), (-0.05, 0, 0.57), (0.7, 0, 0.17), (0.7, 0.6, 0.17), (0.53, 0.6, 0.75), (0.53, 0, 0.75), (0.53, 0.6, 0.75), (0.7, 0.6, 0.17), (0.13, 0.6, 0), (-0.05, 0.6, 0.57), (-0.05, 0, 0.57), (-0.05, 0.6, 0.57), (0.13, 0.6, 0), (0.13, 0, 0), (0.13, 0, 0), (0.13, 0.6, 0), (0.7, 0.6, 0.17), (0.7, 0, 0.17), (0.7, 0, 0.17)]
    uniform token subdivisionScheme = "none"
    float3 xformOp:translate:pivot = (0.325, 0.3, 0.375)
    uniform token[] xformOpOrder = ["xformOp:translate:pivot", "!invert!xformOp:translate:pivot"]
}

def Material "whiteSG" (
    kind = "assembly"
)
{
    token outputs:surface.connect = </whiteSG/white.outputs:surface>

    def Shader "white"
    {
        uniform token info:id = "UsdPreviewSurface"
        color3f inputs:diffuseColor = (0.58000004, 0.568, 0.544)
        normal3f inputs:normal = (1, 1, 1)
        float inputs:roughness = 0.33700418
        color3f inputs:specularColor = (0, 0, 0)
        int inputs:useSpecularWorkflow = 1
        token outputs:displacement
        token outputs:surface
    }
}

def "Render"
{
    def RenderSettings "settings"
    {
        uniform int2 resolution = (800, 800)
    }
}


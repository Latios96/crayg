#usda 1.0
(
    defaultPrim = "CornellBox_Original"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "CornellBox_Original" (
    kind = "component"
)
{
    float3 xformOp:scale = (274.22296, 274.22296, 274.22296)
    float3 xformOp:translate:rotatePivot = (-2.742227, 272.85184, -6.8555675)
    float3 xformOp:translate:scalePivot = (-0.00999999, 0.995, -0.024999976)
    float3 xformOp:translate:scalePivotTranslate = (-2.732227, 271.85684, -6.8305674)
    uniform token[] xformOpOrder = ["xformOp:translate:rotatePivot", "!invert!xformOp:translate:rotatePivot", "xformOp:translate:scalePivotTranslate", "xformOp:translate:scalePivot", "xformOp:scale", "!invert!xformOp:translate:scalePivot"]

    def Mesh "backWall" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.02, 0, -1.04), (1, 1.99, -1.04)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Original/Looks/floor16SG>
        point3f[] points = [(-0.99, 0, -1.04), (1, 0, -1.04), (1, 1.99, -1.04), (-1.02, 1.99, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "ceiling" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.02, 1.99, -1.04), (1, 1.99, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Original/Looks/floor16SG>
        point3f[] points = [(-1.02, 1.99, 0.99), (-1.02, 1.99, -1.04), (1, 1.99, -1.04), (1, 1.99, 0.99)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "floor" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.01, 0, -1.04), (1, 0, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Original/Looks/floor16SG>
        point3f[] points = [(-1.01, 0, 0.99), (1, 0, 0.99), (1, 0, -1.04), (-0.99, 0, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "leftWall" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-1.02, 0, -1.04), (0.13, 1.99, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Original/Looks/leftWall16SG>
        point3f[] points = [(-1.01, 0, 0.99), (-0.99, 0, -1.04), (-1.02, 1.99, -1.04), (-1.02, 1.99, 0.99), (0.13, 0, 0), (-0.05, 0, 0.57)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "rightWall" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(1, 0, -1.04), (1, 1.99, 0.99)]
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        rel material:binding = </CornellBox_Original/Looks/rightWall16SG>
        point3f[] points = [(1, 0, -1.04), (1, 0, 0.99), (1, 1.99, 0.99), (1, 1.99, -1.04)]
        uniform token subdivisionScheme = "none"
    }

    def Mesh "box" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.05, 0, 0), (0.7, 0.6, 0.75)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 14, 15, 16, 17, 18, 19, 20, 21]
        rel material:binding = </CornellBox_Original/Looks/floor16SG>
        point3f[] points = [(-0.05, 0, 0.57), (-0.05, 0.6, 0.57), (0.13, 0.6, 0), (0.13, 0, 0), (0.53, 0.6, 0.75), (0.7, 0.6, 0.17), (0.13, 0.6, 0), (-0.05, 0.6, 0.57), (0.13, 0, 0), (0.13, 0.6, 0), (0.7, 0.6, 0.17), (0.7, 0, 0.17), (0.53, 0, 0.75), (0.7, 0, 0.17), (0.7, 0, 0.17), (0.7, 0.6, 0.17), (0.53, 0.6, 0.75), (0.53, 0, 0.75), (0.53, 0, 0.75), (0.53, 0.6, 0.75), (-0.05, 0.6, 0.57), (-0.05, 0, 0.57)]
        uniform token subdivisionScheme = "none"
        float3 xformOp:translate:pivot = (0.325, 0.3, 0.375)
        uniform token[] xformOpOrder = ["xformOp:translate:pivot", "!invert!xformOp:translate:pivot"]
    }

    def Mesh "shortBox" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.71, -5.9604645e-8, -0.67), (0.04, 1.2, 0.09)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 0, 3, 5, 5, 3, 2, 6, 6, 2, 1, 7, 7, 1, 0, 4, 7, 1, 0, 4]
        rel material:binding = </CornellBox_Original/Looks/floor16SG>
        point3f[] points = [(-0.53, 1.2, 0.09), (0.04, 1.2, -0.09), (-0.14000002, 1.2, -0.67), (-0.71, 1.2, -0.49), (-0.53, -5.9604645e-8, 0.09), (-0.71, 0, -0.49), (-0.14, 0, -0.67), (0.04, -5.9604645e-8, -0.09)]
        uniform token subdivisionScheme = "none"
    }

    def Scope "Looks"
    {
        def Material "leftWall16SG"
        {
            token outputs:surface.connect = </CornellBox_Original/Looks/leftWall16SG/leftWall16.outputs:surface>

            def Shader "leftWall16"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.64000005, 0.040000003, 0.040000003)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.33700418
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }

        def Material "rightWall16SG"
        {
            token outputs:surface.connect = </CornellBox_Original/Looks/rightWall16SG/rightWall16.outputs:surface>

            def Shader "rightWall16"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.040000003, 0.64000005, 0.040000003)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.33700418
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }

        def Material "floor16SG"
        {
            token outputs:surface.connect = </CornellBox_Original/Looks/floor16SG/white.outputs:surface>

            def Shader "white"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.64000005, 0.64000005, 0.64000005)
                normal3f inputs:normal = (1, 1, 1)
                float inputs:roughness = 0.33700418
                color3f inputs:specularColor = (0, 0, 0)
                int inputs:useSpecularWorkflow = 1
                token outputs:displacement
                token outputs:surface
            }
        }
    }
}

def Camera "render_cam" (
    kind = "assembly"
)
{
    float2 clippingRange = (0.1, 10000)
    float focusDistance = 5
    float horizontalAperture = 35.999928
    float verticalAperture = 23.999952
    float3 xformOp:scale = (274.22296, 274.22296, 274.22296)
    double3 xformOp:translate = (-1.5970996833552915, 263.76677814760245, 990.5449952707385)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:scale"]
}

def RectLight "areaLight1" (
    prepend apiSchemas = ["ShadowAPI"]
    kind = "assembly"
)
{
    float inputs:intensity = 30
    bool inputs:normalize = 1
    color3f inputs:shadow:color
    bool inputs:shadow:enable
    float3 xformOp:rotateXYZ = (-90, 0, 0)
    float3 xformOp:scale = (63.441784, 51.77433, 65.62943)
    double3 xformOp:translate = (-1.4568933876165227, 543.9924169516432, -7.2844669380827485)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
}

def "Render"
{
    def RenderSettings "settings"
    {
        uniform int2 resolution = (800, 800)
    }
}


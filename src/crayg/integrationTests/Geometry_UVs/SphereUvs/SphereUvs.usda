#usda 1.0
(
    defaultPrim = "pPlane1"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Sphere "pPlane1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
        rel material:binding = </pPlane1/mtl/usdPreviewSurface1SG>
		double radius = 0.5

    def Scope "mtl"
    {
        def Material "usdPreviewSurface1SG"
        {
            string inputs:file1:varname = "st"
            token outputs:surface.connect = </pPlane1/mtl/usdPreviewSurface1SG/usdPreviewSurface1.outputs:surface>

            def Shader "usdPreviewSurface1"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor.connect = </pPlane1/mtl/usdPreviewSurface1SG/float2ToColor.outputs:out>
                token outputs:displacement
                token outputs:surface
            }

            def Shader "float2ToColor"{
            	uniform token info:id = "crayg:Vector2fToColor"
            	float2 inputs:vector2fInput.connect = </pPlane1/mtl/usdPreviewSurface1SG/place2dTexture1.outputs:result>
            	color3f outputs:out
            }

            def Shader "place2dTexture1"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                string inputs:varname.connect = </pPlane1/mtl/usdPreviewSurface1SG.inputs:file1:varname>
                float2 outputs:result
            }
        }
    }
}

def Camera "render_cam" (
    kind = "assembly"
)
{
    float2 clippingRange = (0.1, 10000)
    float focalLength = 35
    float focusDistance = 5
    float horizontalAperture = 35.999928
    float verticalAperture = 23.999952
    float3 xformOp:rotateXYZ = (-90, -0, 0)
    double3 xformOp:translate = (3.0266956608384196e-19, 2.670244995002008, 1.0931106931298893e-18)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

def RectLight "areaLight1" (
    prepend apiSchemas = ["ShadowAPI"]
    kind = "assembly"
)
{
    bool inputs:normalize = 1
    float inputs:intensity = 225
    color3f inputs:shadow:color
    bool inputs:shadow:enable
    float3 xformOp:rotateXYZ = (-90, 0, 0)
    double3 xformOp:translate = (0, 15, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

def "Render"
{
    def RenderSettings "settings"
    {
        uniform int2 resolution = (480, 270)
        uniform int maxSamples = 64
    }
}


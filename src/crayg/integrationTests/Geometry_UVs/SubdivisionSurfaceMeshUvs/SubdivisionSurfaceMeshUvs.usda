#usda 1.0
(
    defaultPrim = "render_cam"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Camera "render_cam" (
    kind = "assembly"
)
{
    float2 clippingRange = (0.1, 10000)
    float focalLength = 35
    float focusDistance = 5
    float horizontalAperture = 35.999928
    float verticalAperture = 23.999952
    float3 xformOp:rotateXYZ = (-90, -0, 0)
    double3 xformOp:translate = (3.0266956608384196e-19, 2.670244995002008, 1.0931106931298893e-18)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

def RectLight "areaLight1" (
    prepend apiSchemas = ["ShadowAPI"]
    kind = "assembly"
)
{
    float inputs:intensity = 225
    bool inputs:normalize = 1
    color3f inputs:shadow:color
    bool inputs:shadow:enable
    float3 xformOp:rotateXYZ = (-90, 0, 0)
    double3 xformOp:translate = (0, 15, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ"]
}

def "Render"
{
    def RenderSettings "settings"
    {
        uniform int2 resolution = (480, 270)
        uniform int maxSamples = 64
    }
}

def Mesh "pCube1" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    uniform bool doubleSided = 1
    float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
    int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 1, 0, 1, 7, 5, 3, 6, 0, 2, 4]
    rel material:binding = </pCube1/mtl/usdPreviewSurface1SG>
    normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
        interpolation = "faceVarying"
    )
    point3f[] points = [(-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
    texCoord2f[] primvars:st = [(0.375, 0), (0.625, 0), (0.375, 0.25), (0.625, 0.25), (0.375, 0.5), (0.625, 0.5), (0.375, 0.75), (0.625, 0.75), (0.375, 1), (0.625, 1), (0.875, 0), (0.875, 0.25), (0.125, 0), (0.125, 0.25)] (
        customData = {
            dictionary Maya = {
                token name = "map1"
            }
        }
        interpolation = "faceVarying"
    )
    int[] primvars:st:indices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 6, 7, 9, 8, 1, 10, 11, 3, 12, 0, 2, 13]
    uniform token subdivisionScheme = "catmullClark"

    def GeomSubset "back"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [2]
    }

    def GeomSubset "bottom"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [3]
    }

    def GeomSubset "front"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [0]
    }

    def GeomSubset "left"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [5]
    }

    def GeomSubset "right"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [4]
    }

    def GeomSubset "top"
    {
        uniform token elementType = "face"
        uniform token familyName = "componentTag"
        int[] indices = [1]
    }

    def Scope "mtl"
        {
            def Material "usdPreviewSurface1SG"
            {
                string inputs:file1:varname = "st"
                token outputs:surface.connect = </pCube1/mtl/usdPreviewSurface1SG/usdPreviewSurface1.outputs:surface>
    
                def Shader "usdPreviewSurface1"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor.connect = </pCube1/mtl/usdPreviewSurface1SG/float2ToColor.outputs:out>
                    token outputs:displacement
                    token outputs:surface
                }
    
                def Shader "float2ToColor"{
                	uniform token info:id = "crayg:Vector2fToColor"
                	float2 inputs:vector2fInput.connect = </pCube1/mtl/usdPreviewSurface1SG/place2dTexture1.outputs:result>
                	color3f outputs:out
                }
    
                def Shader "place2dTexture1"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    string inputs:varname.connect = </pCube1/mtl/usdPreviewSurface1SG.inputs:file1:varname>
                    float2 outputs:result
                }
            }
        }
}

// clang-format off
#define CRAYG_CHECK_NOT_NULLPTR_IMPL(ptr) CRAYG_CHECK_OR_THROW(ptr != nullptr, "Pointer should not be null!")
#define CRAYG_CHECK_IS_VALID_INDEX_IMPL(index, size) CRAYG_CHECK_OR_THROW((index >= 0 && index < size), fmt::format("Index is out of range: {}, size is {}!", index, size))
#define CRAYG_CHECK_EQUALS_IMPL(actual, expected) CRAYG_CHECK_OR_THROW(actual == expected, fmt::format("Expected {}, but was {}!", expected, actual))
#define CRAYG_CHECK_NOT_EQUALS_IMPL(actual, notExpected) CRAYG_CHECK_OR_THROW(actual != notExpected, fmt::format("Expected {} not to be {}!", actual, notExpected))
#define CRAYG_CHECK_GREATER_OR_EQUALS_IMPL(actual, expected) CRAYG_CHECK_OR_THROW((actual >= expected), fmt::format("Expected {} to be greater or equals than {}!", actual, expected))
#define CRAYG_CHECK_GREATER_THAN_IMPL(actual, expected) CRAYG_CHECK_OR_THROW((actual > expected), fmt::format("Expected {} to be greater than {}!", actual, expected))
#define CRAYG_CHECK_LESS_OR_EQUALS_IMPL(actual, expected) CRAYG_CHECK_OR_THROW((actual <= expected), fmt::format("Expected {} to be less or equals than {}!", actual, expected))
#define CRAYG_CHECK_LESS_THAN_IMPL(actual, expected) CRAYG_CHECK_OR_THROW((actual < expected), fmt::format("Expected {} to be less than {}!", actual, expected))
#define CRAYG_CHECK_WITHIN_RANGE_INCLUSIVE_IMPL(actual, min, max) CRAYG_CHECK_OR_THROW((actual >= min && actual <= max), fmt::format("Expected {} to be in interval [{},{}]!", actual, min, max))
#define CRAYG_CHECK_NOT_WITHIN_RANGE_INCLUSIVE_IMPL(actual, min, max) CRAYG_CHECK_OR_THROW((actual < min || actual > max), fmt::format("Expected {} not to be in interval [{},{}]!", actual, min, max))
#define CRAYG_CHECK_WITHIN_RANGE_EXCLUSIVE_IMPL(actual, min, max) CRAYG_CHECK_OR_THROW((actual > min && actual < max), fmt::format("Expected {} to be in interval ]{},{}[!", actual, min, max))
#define CRAYG_CHECK_NOT_WITHIN_RANGE_EXCLUSIVE_IMPL(actual, min, max) CRAYG_CHECK_OR_THROW((actual <= min || actual >= max), fmt::format("Expected {} not to be in interval ]{},{}[!", actual, min, max))
#define CRAYG_CHECK_IS_NOT_NAN_IMPL(value) CRAYG_CHECK_OR_THROW((!std::isnan(value)), "Value should not be NaN!")
#define CRAYG_CHECK_HAS_NO_NAN_IMPL(value) CRAYG_CHECK_OR_THROW((!value.isNan()), fmt::format("Value {} should not have NaN!", value))
#define CRAYG_CHECK_STATE_IMPL(actualState, expectedState) CRAYG_CHECK_OR_THROW((actualState == expectedState), fmt::format("Expected state {}, was {}!", actualState, expectedState))
#define CRAYG_CHECK_OPTIONAL_HAS_VALUE_IMPL(optional) CRAYG_CHECK_OR_THROW((optional.has_value()), "Expected optional to have value!")
#define CRAYG_CHECK_IS_NORMALIZED_VECTOR_IMPL(vector) CRAYG_CHECK_OR_THROW((std::fabs((vector).length() - 1) < 0.001f), fmt::format("Vector is not unit vector!: {}", vector))
// clang-format on
